; 记录器：提供应用程序代码直接使用的接口
[loggers]
; 声明2个记录器：root 必须要有
keys=root,woniusales

[handlers]
; 声明2个处理器
keys=fileHandler,consoleHandler

[formatters]
keys=simpleFormatter

; 定义logger模块：节点命名规则 logger_name，name是来源于loggers（记录器）里面定义的 keys的值
; 必须包含一个名字叫做root的logger（记录器），root是父类，一定是存在的，其它的是自定义。
; 在不指定的情况下默认的logger，必须有，否则报错，root为该logger的名称，在[loggers]中已经声明
[logger_root]
;日志级别
level=DEBUG
; handler:处理后输出的位置
handlers=consoleHandler

[logger_woniusales]
level=DEBUG
; handler:处理后输出的位置：指定该logger的处理器的名称，可以是多个
handlers=fileHandler,consoleHandler
;qualname:定义logger对象是需要绑定的日志策略名字
qualname=woniusales
;progarate:是否将日志传给上游(多级上游，顶级为root,以 foo.A.B类似表示，foo就是A,B的顶级，A就是B的父级);0 - 不继承
propagate=0

; 控制台输出处理器的设置，名字必须要和handlers 中的keys 的值 一模一样
[handler_consoleHandler]
class=StreamHandler
args=(sys.stdout,)
level=DEBUG
formatter=simpleFormatter

; 文件输出处理器的设置
[handler_fileHandler]
;使用的包和对应的方法
class=handlers.TimedRotatingFileHandler
; filename - 文件名, when='h' - 开始写文件或重新写文件的时间控制, interval=1 - 间隔时间 backupCount=0 - 保留份数，0保留全部,
;  encoding=None - 编码格式, delay=False - 延迟时间, utc=False - utc时间, atTime=None
args=(r'..\logging_layer\woniuseles.log','midnight',1,0,"utf8")
level=DEBUG
formatter=simpleFormatter

; 格式化器的设置
[formatter_simpleFormatter]
format = %(asctime)s %(levelname)8s %(filename)s [:%(threadName)s] %(message)s
datefmt = %Y-%m-%d %H:%M:%S